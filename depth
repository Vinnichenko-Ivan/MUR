//1. Программируем в миссии 0 погружение робота и в основном цикле удержание глубины роботом. Для этого применим пропорциональный регулятор.

#include <murAPI.hpp>
 
 //вывод сообщений
int DEBUG = 1;

//установка глубины в см
float depthToSet = 50.0;

//коэфф.пропорциональности для поддержки глубины
int kpdepth = 7;

//таймер работы программы
Timer t;


void setdepth(float depth){
    mur.setPortC(kpdepth*(depthToSet - depth));
    //if (DEBUG) 
        //вывод сообщения про err глубины каждые 5 сек
        //if (t.elapsed()/5000%2) std::cout << "err depth " << depthToSet - depth << std::endl;
}
 
int main()
{
    //запуск таймера
    t.start();
    
    //флаг выхода на заданную глубину
    bool idown = false;
    
    //номер текущей миссии
    int mission = 0;
    
    //бесконечный цикл
    while(true){
        //получить курс
        float yaw = mur.getYaw();
        
        //получить глубину
        float depth = mur.getInputAOne();
         
        //поддержка рабочей глубины
        setdepth(depth);

        switch (mission) {
            
            //выполнение миссии №0
            case 0: {
                //погрузиться на глубину 50 см
                while ((! idown) && (depth < depthToSet)){
                    float depth = mur.getInputAOne();
                     setdepth(depth);
                    if ((! idown) && depth > depthToSet) idown = true;
                }
                std::cout << "mission " << mission << std::endl;
                mission++;
                break;
            }
            
        } //end switch
    } //end while
    return 0;
}



