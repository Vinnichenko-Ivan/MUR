////////////////////Поиск центра + бинаризация + выравнивание на мяч отлаженно/////////////////////
#include <murAPI.hpp>
#include <cmath>
#include <iostream>
using namespace std;
 float absoluteYaw= mur.getYaw();
//установка глубины в см
float errorOld=0,error=0,errorIntegral=0,errorBalance,errorBalanceOld,ErrorBalanceIntegral,uOld;
//коэфф.пропорциональности для поддержки глубины
float kpdepth = 12.5;
float kddepth = 1;
float kidepth =  0;
float kpbalance = 4;
float kdbalance = 0.0333;
float kibalance = 0;
float u;
float filtre[3];





Timer t;


IplImage* frame;
IplImage* onlyBinary;
IplImage* hsv_and = 0;
int targetx,targety;
int counter = 0;
float max_r = 0;
bool findCircle = 0;
//Включение режима отладки 
int DEBUG = 1;
char ch; 
float height,width;
cv::Mat image2;
IplImage* bufer;
IplImage ipltemp;
CvSeq* approx = 0;
CvSeq* results = 0;
IplConvKernel* kern;
//Координаты X,Y крайней левой нижней точки
int angleToTarget = 0;
void er_del(int radi)
{
        kern = cvCreateStructuringElementEx(radi*2+1,radi*2+1,radi,radi,CV_SHAPE_ELLIPSE);
}
//Функция поиска координат вершин прямоугольника, ПЕРЕД НЕЙ ДОЛЖНА БЫТЬ ВЫПОЛНЕНА ФУНКЦИЯ БИНАРИЗАЦИИ, выдает 0/1 в зависимости от нахождения
bool searchRectangle()
{
    findCircle = 0;
    CvMemStorage* mem = cvCreateMemStorage(0);
    CvSeq* seq = 0;
    CvSeq* maxContour = 0;
    CvSeq* secondContour = 0;
    cvSmooth(onlyBinary,onlyBinary, CV_GAUSSIAN, 5, 5 );
    er_del(1);
    cvErode(onlyBinary,onlyBinary,kern,4);
    double perim = 0,per;
    cvFindContours(onlyBinary,mem,&seq,sizeof(CvContour),CV_RETR_LIST,CV_CHAIN_APPROX_SIMPLE,cvPoint(0,0));
    if(seq!=0)
    {
        for(CvSeq* sec = seq;sec!=0;sec = sec->h_next)
        {
            per = cvContourPerimeter(sec);
            if(per>perim)
            {
                maxContour = sec;
                perim = per;
            }   
        }
    float radius;
    CvPoint2D32f center;
    cvMinEnclosingCircle(maxContour, &center, &radius);
    targetx = center.x;
    targety = center.y;
    approx = cvApproxPoly(maxContour,sizeof(CvContour),mem, CV_POLY_APPROX_DP, 10, 0);
    if(approx->total == 4)
    {
        findCircle = 1;
        int rectPointX[2];
        int rectPointY[2];
        
        int maxDist = 0;
       
        //     CvPoint point1 = cvPoint(cvRound(pf[0]),cvRound(pf[1]));
      //  cout<<"ANGLE:   "<<pf->x<<endl; 
      // angleToTarget = (57 * atan((rectPointX[0]-rectPointX[1])/(rectPointY[0] - rectPointY[1])));
      //  cout<<angleToTarget<<endl; 
      //  cvRotatedRect ellipse2 = cvFitEllipse(approx);
    }
    
}  
    if(DEBUG == 1)
    {
        cvShowImage("orig",frame);
        cvShowImage("main",onlyBinary);
        ch = cvWaitKey(33);
        if(ch == 27)
        {
            cvDestroyAllWindows();
            cvReleaseImage(&frame);
            return 0;
        }
        }
        else
            ch = cvWaitKey(33);    
        cvReleaseMemStorage(&mem);
        onlyBinary = 0;
    return findCircle;
       
}
//Функция поиска координат центра круга, ПЕРЕД НЕЙ ДОЛЖНА БЫТЬ ВЫПОЛНЕНА ФУНКЦИЯ БИНАРИЗАЦИИ, выдает 0/1 в зависимости от нахождения
bool searchCircle()
{
    findCircle = 0;
    CvMemStorage* mem = cvCreateMemStorage(0);
    CvSeq* seq = 0;
    CvSeq* maxContour = 0;
    CvSeq* secondContour = 0;
    er_del(2);
    cvDilate(hsv_and,hsv_and,kern,4);
    cvSmooth(hsv_and,hsv_and,CV_BLUR, 8, 8);
    
     results = cvHoughCircles(hsv_and,mem,CV_HOUGH_GRADIENT,5,hsv_and->width/5); 
     if(results!=0)
     {
         max_r = 0;
         CvPoint maxPoint;
                for( int i = 0; i < results->total; i++ ) {
                    float* p = (float*) cvGetSeqElem( results, i );
                    CvPoint pt = cvPoint( cvRound( p[0] ), cvRound( p[1] ) );
                    if(p[2]>max_r)
                    {
                        max_r = cvRound(p[2]);
                        maxPoint = pt;
                    }
                             
                  } 
         cvCircle(frame,maxPoint, max_r,cvScalar(0,255,0), 5, 8);
        cout<<endl<<endl<<max_r;
       
       if(max_r>0)
           findCircle = 1;
        
        targetx = maxPoint.x;
        targety = maxPoint.y;
        cvCircle(frame, maxPoint,max_r, cvScalar(0,255,0), 5, 8);
               
    } 
    if(DEBUG == 1)
        {
        cvShowImage("main",hsv_and);
        cvShowImage("orig",frame);
        ch = cvWaitKey(33);
        if(ch == 27)
        {
            cvDestroyAllWindows();
            cvReleaseImage(&frame);
            return 0;
        }
        }
        else
            ch = cvWaitKey(33);    
          cvReleaseMemStorage(&mem);
      //    cvReleaseImage(&onlyBinary);
    return findCircle;
}

//Функции бинаризации, первым аргументом идет номер камеры 0 - нижняя , 1 - фронтальная
void binary(bool camNum,int hsv1,int hsv2,int hsv3,int hsv4,int hsv5,int hsv6)
{
     if(counter == 0)
       {
            if(DEBUG ==1)
            {
            cvNamedWindow("main",1);
            cvNamedWindow("orig",1);
            }
            counter++;
       }
    if(camNum)
       image2 = mur.getCameraTwoFrame();
    else
       image2 = mur.getCameraOneFrame();
    ipltemp = image2;
    frame = &ipltemp;
    height = frame->height;
    width = frame->width;
    hsv_and = cvCreateImage( cvGetSize(frame), IPL_DEPTH_8U, 1 );
    IplImage* h_plane = cvCreateImage( cvGetSize(frame), IPL_DEPTH_8U, 1 );
    IplImage* s_plane = cvCreateImage( cvGetSize(frame), IPL_DEPTH_8U, 1 );
    IplImage* v_plane = cvCreateImage( cvGetSize(frame), IPL_DEPTH_8U, 1 );
    cvCvtColor( frame,frame, CV_BGR2HSV); 
    cvSplit( frame, h_plane, s_plane, v_plane, 0 );
    cvInRangeS(h_plane, cvScalar(hsv1), cvScalar(hsv2), h_plane);
    cvInRangeS(s_plane, cvScalar(hsv3), cvScalar(hsv4), s_plane);
    cvInRangeS(v_plane, cvScalar(hsv5), cvScalar(hsv6), v_plane);
    cvAnd(h_plane, s_plane, hsv_and);
    cvAnd(hsv_and, v_plane, hsv_and);
    onlyBinary = cvCloneImage(hsv_and);
    //cvWaitKey(33);
    cvReleaseImage(&h_plane);
    cvReleaseImage(&s_plane);
    cvReleaseImage(&v_plane);
}



/*int main()
{
    while(1)
   {
        //Распознавание оранжевой полоски
        binary(0,2,51,60,255,87,255);
        int i  =   searchRectangle();
        //Поиск красного шара
      //  binary(1,0,8,137,255,121,255);
    //    int i = searchCircle();    
  }
        
        
       
   
 
   return 0;
}*/

float getdepth()
{
    filtre[2]=filtre[1]; 
    filtre[1]=filtre[0];
    filtre[0]=mur.getInputAOne(); //датчик глубины на первом i2c
    //float dep=mur.getInputBOne(); //датчик глубины на втором i2c
    return (filtre[0]+filtre[1]+filtre[2])/3;
}

void setdepth(float depthToSet){
    float depth = getdepth();
    error=depthToSet-depth;
    errorIntegral+=error;
    mur.setPortC((depthToSet-depth)*kpdepth+(error-errorOld)*kddepth+errorIntegral*kidepth);
    errorOld=error;
    if(errorIntegral>3000){
        errorIntegral=3000;}
    if(errorIntegral>-3000){
        errorIntegral=-3000;}
        //  if (DEBUG) 
        //вывод сообщения про err глубины каждые 5 сек
        
    //if (t.elapsed()/5000%2) std::cout << "err depth " << depthToSet - depth << std::endl;
        
}


void balance(float yaw ){
    uOld=u;
    u =((int)(yaw-mur.getYaw()+540)%360-180)*kpbalance;
mur.setPortA(-u-(u-uOld)*kdbalance);
mur.setPortB(u+(u-uOld)*kdbalance);
    }
    
    void GO(float yaw ){
    uOld=u;
    
        u =((int)(yaw-mur.getYaw()+540)%360-180)*kpbalance;
        
        if(u<5&&u>-5){
mur.setPortA(-90-u-(u-uOld)*kdbalance);
mur.setPortB(-90+u+(u-uOld)*kdbalance);
        }
        else{balance(yaw);}
            }
int main()
{
std::cout <<"start";
    float yaw=0;
float setyaw = 0; 
  bool flag=1;
        while(true){
            binary(1,0,2,137,255,121,255);
// int i = searchCircle(); 
                //Размываем
               // er_del(1);
                //Ищем центр
            int a = searchCircle();
            
             setdepth(100);
          std::cout << t.elapsed() <<"NO"<<"  setyaw+  "<<setyaw<< std::endl;
            if(a==0&&flag){  
               
                setyaw=setyaw+0.75;
               if(setyaw>360){
                   setyaw=0;
                   }
                    balance(setyaw);
                }
            else if(a==1){
             flag=0;
                std::cout << t.elapsed() <<" targetx "<<targetx<<" targety "<<targety<<"  setyaw+  "<<setyaw<< std::endl; 

                 if(abs(targetx-150)>20){
                    setyaw=setyaw+(targetx-150)*0.005;
                    
                   if(setyaw<0){
                   setyaw=360;
                   }
                   if(setyaw>360){
                   setyaw=0;
                   } 
                    balance(setyaw);
                    }
               
                else{
                    std::cout << t.elapsed() <<" YES"<< std::endl;
                    setyaw=setyaw+(targetx-150)*0.001;
                                       if(setyaw<0){
                   setyaw=360;
                   }
                   if(setyaw>360){
                   setyaw=0;
                   } 
                   GO(setyaw);
                    }
                }
  
            balance(setyaw);
            }
    return 0;
}
