#include <murAPI.hpp>

static cv::Mat image, image2; // для кадра камеры
 int DEBUG = 1;
 float absoluteYaw= mur.getYaw();
//установка глубины в см
float errorOld=0,error=0,errorIntegral=0,errorBalance,errorBalanceOld,ErrorBalanceIntegral,uOld;
//коэфф.пропорциональности для поддержки глубины
float kpdepth = 12.5;
float kddepth = 1;
float kidepth =  0;
float kpbalance = 4;
float kdbalance = 0.0333;
float kibalance = 0;
float u;
float filtre[3];
int targetx,targety;
//таймер работы программы
Timer t;
float getdepth()
{
    filtre[2]=filtre[1]; 
    filtre[1]=filtre[0];
    filtre[0]=mur.getInputAOne(); //датчик глубины на первом i2c
    //float dep=mur.getInputBOne(); //датчик глубины на втором i2c
    return (filtre[0]+filtre[1]+filtre[2])/3;
}




//Поиск круга аргумент: 0 - донная камера, 1 - фронтальная камера
//вывод 0 - не найденоб 1 - найдено + загрузка координат центра объекта в глоб переменные targetx, targety
int findCircle(int camera) {
    int result = 0; //для результата
    //initCamera(0); //при работе с симулятором камеру инициализировать не нужно
    if (DEBUG){
        if (camera == 0) image = mur.getCameraOneFrame(); //захватить кадр с камеры 1
        if (camera == 1) image = mur.getCameraTwoFrame(); //захватить кадр с камеры 2
        cv::imshow("Cam", image);
        cv::waitKey(10);                    
    }

    //детектирование объекта средствами MUR
     mur.addDetectorToList(Object::CIRCLE, camera); //cam down - 0, cam forward - 1 
     for (const auto &obj : mur.getDetectedObjectsList(camera)) { //cam down - 0, cam forward - 1 
           if (obj.r > 8) // мелкие объекты не рассматриваем
             if (obj.type == Object::CIRCLE) { //
                if (!result) { 
                    result = 1;
                   // if (DEBUG) std::cout << t.elapsed() << " Found Circle obj.x:" << obj.x << "  obj.y:" << obj.y << "  obj.r:" << obj.r << "  obj.angle:" << obj.angle  << "  obj.size:" << obj.size << std::endl;
                    targetx = obj.x;
                    targety = obj.y;
                    if (DEBUG) cv::circle(image, cv::Point2i(obj.x, obj.y), obj.r, cv::Scalar(255, 0, 100), 8);
                    if (DEBUG) cv::imshow("Image", image);
                    if (DEBUG) cv::waitKey(10);                    
                }
            }
        }

    return result;
}




void setdepth(float depthToSet){
    float depth = getdepth();
    error=depthToSet-depth;
    errorIntegral+=error;
    mur.setPortC((depthToSet-depth)*kpdepth+(error-errorOld)*kddepth+errorIntegral*kidepth);
    errorOld=error;
    if(errorIntegral>3000){
        errorIntegral=3000;}
    if(errorIntegral>-3000){
        errorIntegral=-3000;}
        //  if (DEBUG) 
        //вывод сообщения про err глубины каждые 5 сек
        
    //if (t.elapsed()/5000%2) std::cout << "err depth " << depthToSet - depth << std::endl;
        
}


void balance(float yaw ){
    uOld=u;
    u =((int)(yaw-mur.getYaw()+540)%360-180)*kpbalance;
mur.setPortA(-u-(u-uOld)*kdbalance);
mur.setPortB(u+(u-uOld)*kdbalance);
    }
    
    void GO(float yaw ){
    uOld=u;
    
        u =((int)(yaw-mur.getYaw()+540)%360-180)*kpbalance;
        
        if(u<5&&u>-5){
mur.setPortA(-90-u-(u-uOld)*kdbalance);
mur.setPortB(-90+u+(u-uOld)*kdbalance);
        }
        else{balance(yaw);}
            }
int main()
{
std::cout <<"start";
    float yaw=0;
float setyaw = 0; 
  
        while(true){
            
            
             setdepth(100);
            int a=findCircle(1);
            if(a==0){  std::cout << t.elapsed() <<"NO"<<"  setyaw+  "<<setyaw<< std::endl;
               
                setyaw=setyaw+0.25;
               if(setyaw>360){
                   setyaw=0;
                   }
                    balance(setyaw);
                }
            else if(a==1){
             
                std::cout << t.elapsed() <<" targetx "<<targetx<<" targety "<<targety<<"  setyaw+  "<<setyaw<< std::endl; 

                 if(abs(targetx-150)>20){
                    setyaw=setyaw+(targetx-150)*0.01;
                    
                   if(setyaw<0){
                   setyaw=360;
                   }
                   if(setyaw>360){
                   setyaw=0;
                   } 
                    balance(setyaw);
                    }
               
                else{
                    std::cout << t.elapsed() <<" YES"<< std::endl;
                    setyaw=setyaw+(targetx-150)*0.05;
                                       if(setyaw<0){
                   setyaw=360;
                   }
                   if(setyaw>360){
                   setyaw=0;
                   } 
                   GO(setyaw);
                    }
                }
  
           // GO(setyaw);
            }
    return 0;
}
