/*
//https://github.com/kosachenkosv/MUR/blob/patch-1/testMission0
Программа для MUR EDU выполняет три последовательные mission от 0 до 2
0 - погружение на заданную глубину
1 - плыть прямо с удержанием курса yaw по гироскопу в течение 3 сек
2 - найти камерой на дне полоску RECTANGLE, определеить ее угол и скорректировать курс робота по углу полоски
3 - всплыть на глубину 20 см

Autor: Serg Kosachenko kosachenkosv@yandex.ru
*/

#include <murAPI.hpp>
 
 //вывод сообщений
int DEBUG = 1;

//установка глубины в см


//коэфф.пропорциональности для поддержки глубины
int kpdepth = 15;

//таймер работы программы
Timer t;

float getdepth()
{
    float dep=mur.getInputAOne();
    //float dep=mur.getInputBOne();
    return dep;
}
void setdepth(float depthToSet){
    float depth = getdepth();
    if(depth>depthToSet)
    {mur.setPortC(-100);}
    else
        mur.setPortC(100);
  //  if (DEBUG) 
        //вывод сообщения про err глубины каждые 5 сек
       // if (t.elapsed()/5000%2) std::cout << "err depth " << depthToSet - depth << std::endl;
}


 
int main()
{
    static cv::Mat image, image2; // для кадра камеры
    
    //запуск таймера
    t.start();
    
    //флаг выхода на заданную глубину
    bool idown = false;
    
    //номер текущей миссии
    int mission = 0;
    
    mur.setPorts(0, 0, 0, 0);
    
    //бесконечный цикл
    while(true){
        //получить курс
        float yaw = mur.getYaw();
        
        //получить глубину
        //float depth = mur.getInputAOne(); //датчик глубины на первом i2c
       // float depth = getdepth(); //датчик глубины на втором i2c
        //std::cout << "getInputAOne " << mur.getInputAOne() << std::endl;
        //std::cout << "getInputATwo " << mur.getInputATwo() << std::endl;
        //std::cout << "getInputBOne " << mur.getInputBOne() << std::endl;
        //std::cout << "getInputBTwo " << mur.getInputBTwo() << std::endl;
         
        //поддержка рабочей глубины
        //setdepth(depth);


        switch (mission) {
            
            //выполнение миссии №0
            case 0: {
                //погрузиться на глубину 50 см
                while ((! idown) && (getdepth() < 80)){
                    float u=((int)(yaw-mur.getYaw()+540)%360-180)*7;
                    mur.setPortA(-u);
                    mur.setPortB(u);
                    setdepth(82);
                    if ((! idown) && getdepth() > 80) idown = true;
                }
                std::cout << "mission " << mission << std::endl;
                mission++;
                mur.setPorts(0, 0, 0, 0);

                break;
            }
            
            //проплыть прямо 3 сек
            case 1: {
               
                //запуск таймера
                t.start();
                while(t.elapsed()<15000){
                   
                    setdepth(50);
                    
                    float u =((int)(yaw-mur.getYaw()+540)%360-180)*3;
                    mur.setPortA(-90-u);
                    mur.setPortB(-90+u);
                }
                
                mur.setPorts(0, 0, 0, 0);
                std::cout << "mission " << mission << std::endl;
                mission++;
                break;
                
            }
            case 2: {
                    //поиск полоски на дне и выравние по ней курса

                int setyaw = 0; //флаг установки курса по повороту полоски на дне
                
                while ( !setyaw) {

                    //поддержка курса вперед
                    float u =((int)(yaw-mur.getYaw()+540)%360-180)*3;
                    mur.setPortA(-90-u);
                    mur.setPortB(-90+u);

                    setdepth(50); //поддержание глубины
                    
                    int x=0,y=0;
                    //initCamera(0); //при работе с симулятором камеру инициализировать не нужно
                    image = mur.getCameraOneFrame(); //захватить кадр с камеры 1
                    //image = mur.getCameraTwoFrame(); //захватить кадр с камеры 2

                    cv::imshow("Cam", image);//показать кадр в окне
                    cv::waitKey(10);
                    
                     //детектирование объекта средствами MUR
                     mur.addDetectorToList(Object::RECTANGLE, 0); //cam down - 0, cam forward - 1 
                     for (const auto &obj : mur.getDetectedObjectsList(0)) {
                           if (obj.r > 15) // мелкие не рассматриваем
                             if (obj.type == Object::RECTANGLE) { //
                                if (!setyaw) { 
                                    yaw = obj.angle;
                                    std::cout << t.elapsed() << " Rectangle obj.x:" << obj.x << "  obj.y:" << obj.y << "  obj.r:" << obj.r << "  obj.angle:" << obj.angle  << "  obj.size:" << obj.size << std::endl;
                                    image2 = image.clone();
                                    cv::circle(image2, cv::Point2i(obj.x, obj.y), obj.r, cv::Scalar(255, 0, 100), 8);
                                    cv::imshow("Image", image2);
                                    cv::waitKey(10);
                                    setyaw = 1;
                                }
                            }
                        }
                }
                
                //поворот на месте на новый курс по полоске
                while( abs(yaw -mur.getYaw()) > 5) {    
                    setdepth(50); //поддержание глубины 50

                    //подрулирование левым и правым моторами на месте
                    float u =((int)(yaw-mur.getYaw()+540)%360-180)*3;
                    mur.setPortA(-u);
                    mur.setPortB(+u);
                }

                
                mur.setPortC(0);
                mur.setPorts(0, 0, 0, 0);
                std::cout << "mission " << mission << std::endl;
                mission++;
                break;
                }

            case 3: {
                
                //всплыть на глубину 20 см
                while(20. < getdepth()){
                     setdepth(20);
               }
                
                mur.setPortC(0);
                mur.setPorts(0, 0, 0, 0);
                std::cout << "mission " << mission << std::endl;
                mission++;
                break;
                }

            
        } //end switch
    } //end while
    cvDestroyAllWindows();
    
    return 0;
}
