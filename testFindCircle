/*
//https://github.com/kosachenkosv/MUR/blob/patch-1/testMission0
Программа для MUR EDU выполняет 
тест функции поиска шара по донной/фронтальной (0/1) камере

Autors: Serg Kosachenko kosachenkosv@yandex.ru
        Ivan Vinnichenko 
Date 03.05.2019
*/

#include <murAPI.hpp> //библиотека C:\murIDE\devkit-x86\murlibs\murAPI.hpp

 //вывод сообщений
int DEBUG = 1;

static cv::Mat image, image2; // для кадра камеры

int targetx = 0, targety = 0; //координаты мишени

//установка глубины в см

//коэфф.пропорциональности для поддержки глубины
int kpdepth = 15;

//таймер работы программы
Timer t;

float getdepth()
{
    float dep=mur.getInputAOne();
    //float dep=mur.getInputBOne();
    return dep;
}
void setdepth(float depthToSet){
    float depth = getdepth();
    if(depth>depthToSet)
    {mur.setPortC(-100);}
    else
        mur.setPortC(100);
  //  if (DEBUG) 
        //вывод сообщения про err глубины каждые 5 сек
       // if (t.elapsed()/5000%2) std::cout << "err depth " << depthToSet - depth << std::endl;
}

//Поиск круга аргумент: 0 - донная камера, 1 - фронтальная камера
//вывод 0 - не найденоб 1 - найдено + загрузка координат центра объекта в глоб переменные targetx, targety
int findCircle(int camera) {
    int result = 0; //для результата
    //initCamera(0); //при работе с симулятором камеру инициализировать не нужно
    if (DEBUG){
        if (camera == 0) image = mur.getCameraOneFrame(); //захватить кадр с камеры 1
        if (camera == 1) image = mur.getCameraTwoFrame(); //захватить кадр с камеры 2
        cv::imshow("Cam", image);
        cv::waitKey(10);                    
    }

    //детектирование объекта средствами MUR
     mur.addDetectorToList(Object::CIRCLE, camera); //cam down - 0, cam forward - 1 
     for (const auto &obj : mur.getDetectedObjectsList(camera)) { //cam down - 0, cam forward - 1 
           if (obj.r > 10) // мелкие объекты не рассматриваем
             if (obj.type == Object::CIRCLE) { //
                if (!result) { 
                    result = 1;
                    if (DEBUG) std::cout << t.elapsed() << " Found Circle obj.x:" << obj.x << "  obj.y:" << obj.y << "  obj.r:" << obj.r << "  obj.angle:" << obj.angle  << "  obj.size:" << obj.size << std::endl;
                    targetx = obj.x;
                    targety = obj.y;
                    if (DEBUG) cv::circle(image, cv::Point2i(obj.x, obj.y), obj.r, cv::Scalar(255, 0, 100), 8);
                    if (DEBUG) cv::imshow("Image", image);
                    if (DEBUG) cv::waitKey(10);                    
                }
            }
        }

    return result;
}

 
int main()
{
    //запуск таймера
    t.start();
    
    //флаг выхода на заданную глубину
    bool idown = false;
    
    //номер текущей миссии
    int mission = 0;
    
    mur.setPorts(0, 0, 0, 0);
    
    //бесконечный цикл
    while(true){
        //получить курс
        float yaw = mur.getYaw();
        
        //получить глубину
        //float depth = mur.getInputAOne(); //датчик глубины на первом i2c
       // float depth = getdepth(); //датчик глубины на втором i2c
        //std::cout << "getInputAOne " << mur.getInputAOne() << std::endl;
        //std::cout << "getInputATwo " << mur.getInputATwo() << std::endl;
        //std::cout << "getInputBOne " << mur.getInputBOne() << std::endl;
        //std::cout << "getInputBTwo " << mur.getInputBTwo() << std::endl;
         
        //поддержка рабочей глубины
        //setdepth(depth);


        switch (mission) {
            
            //выполнение миссии проверки поиска шарика
            case 0: {
                //погрузиться на глубину 50 см
                while (true){
                    findCircle(1); // 1 - front camera
                }
                
                std::cout << "mission " << mission << std::endl;
                mission++;
                mur.setPorts(0, 0, 0, 0);

                break;
            }
            
        } //end switch
    } //end while
    cvDestroyAllWindows();
    
    return 0;
}
