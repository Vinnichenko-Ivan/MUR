#include <murAPI.hpp>
IplImage* frame;
IplImage* hsv_and = 0; // для кадра камеры
 int DEBUG = 1;

 float absoluteYaw= mur.getYaw();
//установка глубины в см
float errorOld=0,error=0,errorIntegral=0,errorBalance,errorBalanceOld,ErrorBalanceIntegral,uOld;
//коэфф.пропорциональности для поддержки глубины
float kpdepth = 12.5;
float kddepth = 1;
float kidepth =  0;
float kpbalance = 4;
float kdbalance = 0.0333;
float kibalance = 0;
float u;
float filtre[3];
int targetx,targety;
int counter = 0;
int radi=1;
//Включение режима отладки 
//int DEBUG = 1;
char ch; 
   //Получаем размеры кадра для создания изображений
cv::Mat image1;
cv::Mat image2;
IplImage ipltemp;
IplConvKernel* kern = cvCreateStructuringElementEx(radi*2+1,radi*2+1,radi,radi,CV_SHAPE_ELLIPSE);
//таймер работы программы
Timer t;
float getdepth()
{
    filtre[2]=filtre[1]; 
    filtre[1]=filtre[0];
    filtre[0]=mur.getInputAOne(); //датчик глубины на первом i2c
    //float dep=mur.getInputBOne(); //датчик глубины на втором i2c
    return (filtre[0]+filtre[1]+filtre[2])/3;
}




//Поиск круга аргумент: 0 - донная камера, 1 - фронтальная камера
//вывод 0 - не найденоб 1 - найдено + загрузка координат центра объекта в глоб переменные targetx, targety
bool find_circleCent()
{
    CvMemStorage* mem = cvCreateMemStorage(0);
    CvSeq* seq = 0;
    CvSeq* maxContour = 0;
    cvFindContours(hsv_and,mem,&seq,sizeof(CvContour),CV_RETR_LIST,CV_CHAIN_APPROX_SIMPLE,cvPoint(0,0));
    double perim = 0,per;
    if(seq!=0)
    {
            for(CvSeq* sec = seq;sec!=0;sec = sec->h_next)
            {
                per = cvContourPerimeter(sec);
                if(per>perim)
                {
                    perim = per;
                    maxContour = sec;
                }   
            }
        CvPoint2D32f center;
        float radius;
        cvMinEnclosingCircle(maxContour,  &center, &radius);
        //cout<<"X: "<<center.x<<endl<<"Y: "<<center.y<<endl<<endl;
        targetx = center.x;
        targety = center.y;
        cvCircle(frame,  cvPointFrom32f(center), radius, cvScalar(0,255,0), 5, 8);
        if(DEBUG == 1)
        {
        //cout<<"Target X:   "<<targetx<<"Target Y:   "<<targety<<"Find contours: "<<endl;
        cvShowImage("main",hsv_and);
        // cvShowImage("main2",hsv_and);
        cvShowImage("orig",frame);
        ch = cvWaitKey(33);
        if(ch == 27)
        {
            
            //cvReleaseImage(&img);
            cvDestroyAllWindows();
            cvReleaseImage(&frame);
            return 0;
        }
        }
        else
            ch = cvWaitKey(33);    
        cvClearSeq(seq);
        cvClearSeq(maxContour);  
        cvReleaseMemStorage(&mem);

        return 1;
    }
    else
    {
         if(DEBUG == 1)
        {
        //cout<<"Target X:   "<<targetX<<"Target Y:   "<<targetY<<endl;
        cvShowImage("main",hsv_and);
        // cvShowImage("main2",hsv_and);
        cvShowImage("orig",frame);
        ch = cvWaitKey(33);
        if(ch == 27)
        {
            //cvReleaseImage(&img);
            cvDestroyAllWindows();
            cvReleaseImage(&frame);
            return 0;
        }
        
        }
        else
            ch = cvWaitKey(33); 
       // cvClearSeq(seq);
      //  cvClearSeq(maxContour); 
        cvReleaseMemStorage(&mem);
        return 0;
    }    
}
//Функция размтия, ВЫПОЛНЯЕТСЯ ПОСЛЕ ФУНКЦИИ БИНАРИЗАЦИИ
void er_del(int b)
{
	
        if(b==0)
            cvErode(hsv_and,hsv_and,kern,4);
	if(b==1)
            cvDilate(hsv_and,hsv_and,kern,4);
        //cvReleaseImage(&imgo);
	
        
}
//Функции бинаризации
void binary(int hsv1,int hsv2,int hsv3,int hsv4,int hsv5,int hsv6)
{
       image2 = mur.getCameraTwoFrame();
       ipltemp = image2;
       frame = &ipltemp;
       if(counter == 0)
       {
           
            image1 = mur.getCameraTwoFrame();
            ipltemp = image1;
            frame = &ipltemp;
            int width = frame->width;
            int height = frame->height;
            hsv_and = cvCreateImage( cvGetSize(frame), IPL_DEPTH_8U, 1 );
            if(DEBUG ==1)
            {
            cvNamedWindow("main",1);
            cvNamedWindow("orig",1);
            }
            counter++;
       }
       IplImage* hsv = cvCreateImage( cvGetSize(frame), IPL_DEPTH_8U, 3 );
       IplImage* h_plane = cvCreateImage( cvGetSize(frame), IPL_DEPTH_8U, 1 );
       IplImage* s_plane = cvCreateImage( cvGetSize(frame), IPL_DEPTH_8U, 1 );
       IplImage* v_plane = cvCreateImage( cvGetSize(frame), IPL_DEPTH_8U, 1 );
       cvCvtColor( frame,frame, CV_BGR2HSV ); 
       cvSplit( hsv, h_plane, s_plane, v_plane, 0 );
       cvInRangeS(h_plane, cvScalar(hsv1), cvScalar(hsv2), h_plane);
       cvInRangeS(s_plane, cvScalar(hsv3), cvScalar(hsv4), s_plane);
       cvInRangeS(v_plane, cvScalar(hsv5), cvScalar(hsv6), v_plane);
       cvAnd(h_plane, s_plane, hsv_and);
       cvAnd(hsv_and, v_plane, hsv_and);
       cvReleaseImage(&h_plane);
       cvReleaseImage(&s_plane);
       cvReleaseImage(&v_plane);
       cvReleaseImage(&hsv);
}



void setdepth(float depthToSet){
    float depth = getdepth();
    error=depthToSet-depth;
    errorIntegral+=error;
    mur.setPortC((depthToSet-depth)*kpdepth+(error-errorOld)*kddepth+errorIntegral*kidepth);
    errorOld=error;
    if(errorIntegral>3000){
        errorIntegral=3000;}
    if(errorIntegral>-3000){
        errorIntegral=-3000;}
        //  if (DEBUG) 
        //вывод сообщения про err глубины каждые 5 сек
        
    //if (t.elapsed()/5000%2) std::cout << "err depth " << depthToSet - depth << std::endl;
        
}


void balance(float yaw ){
    uOld=u;
    u =((int)(yaw-mur.getYaw()+540)%360-180)*kpbalance;
mur.setPortA(-u-(u-uOld)*kdbalance);
mur.setPortB(u+(u-uOld)*kdbalance);
    }
    
    void GO(float yaw ){
    uOld=u;
    
        u =((int)(yaw-mur.getYaw()+540)%360-180)*kpbalance;
        
        if(u<5&&u>-5){
mur.setPortA(-90-u-(u-uOld)*kdbalance);
mur.setPortB(-90+u+(u-uOld)*kdbalance);
        }
        else{balance(yaw);}
            }
int main()
{
std::cout <<"start";
    float yaw=0;
float setyaw = 0; 
  
        while(true){
            binary(0,255,195,255,176,255);
                //Размываем
                er_del(1);
                //Ищем центр
int a = find_circleCent();
            
             setdepth(100);
          
            if(a==0){  std::cout << t.elapsed() <<"NO"<<"  setyaw+  "<<setyaw<< std::endl;
               
                setyaw=setyaw+0.25;
               if(setyaw>360){
                   setyaw=0;
                   }
                    balance(setyaw);
                }
            else if(a==1){
             
                std::cout << t.elapsed() <<" targetx "<<targetx<<" targety "<<targety<<"  setyaw+  "<<setyaw<< std::endl; 

                 if(abs(targetx-150)>20){
                    setyaw=setyaw+(targetx-150)*0.01;
                    
                   if(setyaw<0){
                   setyaw=360;
                   }
                   if(setyaw>360){
                   setyaw=0;
                   } 
                    balance(setyaw);
                    }
               
                else{
                    std::cout << t.elapsed() <<" YES"<< std::endl;
                    setyaw=setyaw+(targetx-150)*0.05;
                                       if(setyaw<0){
                   setyaw=360;
                   }
                   if(setyaw>360){
                   setyaw=0;
                   } 
                   GO(setyaw);
                    }
                }
  
           // GO(setyaw);
            }
    return 0;
}
